.TH SZG 1 "Distributed under GNU GPL v3" "(c) SZABO Gergely"
.SH NAME
szg \- SZámolóGép (Hungarian for calculator) written by SzG
.SH SYNOPSIS
szg [-bodxnsfp] [FILE] | [-h] | [-V]
.br
szg -[bodxnsfp]e EXPR
.SH USAGE
Options:
.br
\-h --help     display usage and exit
.br
\-V --version  display version information and exit
.PP
Commands:
.br
-b start in binary I/O mode
.br
-o start in octal I/O mode
.br
-d start in decimal I/O mode (default)
.br
-x start in hexadecimal I/O mode
.PP
-n start in unsigned (natural) calculation mode
.br
-s start in signed calculation mode (default)
.br
-f start in floating-point calculation mode
.PP
-p toggle prompt
.PP
-e treat the rest of the command line as expression
.PP
FILE input file, stdin used if not specified.
.PP
Any combination of commands is allowed, last command wins in case of conflict.
E.g. szg -xnods starts in signed decimal mode.
.br
Unknown options and commands are ignored without a warning.
.SH BACKGROUND
.B szg
is a command line calculator, originally for integer arithmetics, inspired by
.BR bc (1),
desktop calculators and microcontroller programming. Micros often lack
floating-point support, so all calculations are integer-based. During
debugging, one often wishes to simulate calculations with a desktop/GUI
calculator, only to find everything going floating-point after the first
division. That's where
.BR bc (1)
comes into the picture. But it has no hexadecimal support and its workflow
is rather cumbersome. Adding 2 to a previous result cannot be done with
simply typing
.BR "+ 2 Enter" .
And how many times have you mistyped something on a desktop calculator
wishing to undo the last operation? Or wished to have more than one memory?
.SH DESCRIPTION
The main requirements for
.BR szg (1)
are:
.br
\- command line interface with previous results visible on the screen
.br
\- unlimited undo
.br
\- decimal, binary, octal and hexadecimal I/O modes
.br
\- signed and unsigned integer calculation modes
.br
\- floating point mode only upon user request, never upon division
.br
\- ability to go on from previous result with incomplete expression
.br
\- a fair amount of memory registers with intuitive use
.br
\- unlimited amount of user variables
.PP
.BR szg (1)
takes expressions, assignments and commands on stdin and writes the results
to stdout or the specified output FILE upon pressing
.BR Enter .
.SS EXPRESSIONS
.BR szg (1)
expressions are built of numbers (arbitrary coma-grouping allowed)
.B [0-9a-f.,]+
variables
.B [g-z]
user variables
.B $[a-z0-9_]+
last result
.B _
and operators listed below in descending precedence:
.br
.B ()
\   brackets to override operator precedence
.br
.B ~ @x
\ prefix operators        : unary minus, math functions
.br
.B ^
\    power operators         : power
.br
.B */%&
\ multiplicative operators: multiply, divide, modulo, bitwise AND
.br
.B +-|
\  additive operators      : add, substract, bitwise OR
.PP
Math functions:
.B @s @c @a @l @e @r
= sin cos atan log exp sqrt
.PP
Incomplete expressions are where a number is missing from
between operators. The last result
.B _
is used automatically instead.
.br
The ultimate incomplete expression is the empty string, meaning the last result.
.PP
Attention with unary minus:
.br
.B \-expr
means substracting expr from the last result
.B _-expr
, not the negation of expr.
For unary minus use the
.B ~
(tilde) operator.
.SS Floating point support
Floating point numbers can be entered in non-scientific form only.
Examples:
.B 2.3  .0456
.PP
Floting point mode is activated according to the following rules:
.br
\- never upon division
.br
\- implicitly, if an entered expression contains a float-format number
.br
\- implicitly, if power's (^) 2nd operand is negative
.br
\- explicitly, with command F
.PP
Floating point numbers are displayed in scientific format only if necessary.
Switching to floating-point implies switching to decimal I/O mode.
Once in float mode, the commands
.B B O X
(binary, octal, hexadecimal) set binary output-mode only, input mode remains decimal.
.PP
Switching back from floating-point mode to either signed or unsigned integer mode
works with the commands
.B s
and
.B n
, respectively.
.SS ASSIGNMENTS
.BR szg (1)
assignments are in the form of
.BR [g-z]=expr .
The expr may be incomplete, including the ulimate incomplete expression, the
empty string, thus
.B x=
assigns the last result to x.
.PP
User-variables can be created on the fly, by assigning an expression to them.
Their form is a dollar-sign plus any number of lowercase letters.
.B $lifeuniverseeverything=6*7
stores 42 into variable $lifeuniverseeverything, while
.B $bar=
stores the last result in $bar.
.PP
Diagnostic command V or \\v shows the hash function for variable-lookup
and the usage of the 16 hash-buckets. May be deprecated at any time.
.SS COMMANDS
Commands are single uppercase letters, or a backslash plus a lowercase letter.
.PP
B \\b binary I/O mode
.br
O \\o octal I/O mode
.br
D \\d decimal I/O mode
.br
X \\x hexadecimal I/O mode
.PP
N \\n unsigned (natural number) calculation mode
.br
S \\s signed calculation mode
.br
F \\f floating-point calculation mode
.PP
P \\p toggle prompt
.br
U \\u undo, unlimited depth, no redo
.br
Q \\q or ^D (EOF Unix) or ^C (interrupt) to quit
.PP
Signed / unsigned calculation modes affect only */% operations and decimal
IO, nothing else.
.PP
By default, a prompt is indicating IO and calculation mode,
if input is coming from a terminal (no pipe, no input file).
.br
Uppercase prompts B O D X indicate unsinged mode.
.br
Lowercase prompts b o d x f indicate signed/float mode.
.PP
Undo does remember changes in calculation or I/O mode.
.SS COMPOUNDS
.BR szg (1)
accepts combinations of expressions or statements with a leading or trailing command or both.
For example
.B X fffe+1 D
switches to hex mode temporarily to evaluate fffe+1 then displays the result 65535 in decimal.
.SS COMMENTS
Comments between
.B #
and end-of-line.
.SS INPUT FROM COMMAND LINE
When using the
.B szg -e expr
form, be careful with shell expansion taking place before passing expr to szg.
Quote when necessary. Examples with Bourne compatible shells:
.br
.B szg -e 6 * 7
will fail spectacularly, as your current dir listing will be substituted for *.
.br
.B szg -e 6*7
may work, except if you have a file called 617 in you current dir,
resulting in 617 instead of 42.
.br
.B szg -e \\\\x ffff \\\\d
fails as the shell removes the backslashes. Use double backslashes or single quotes.
.SH DIAGNOSTICS
.BR szg (1)
prints diagnostic messages to stderr, thus they appear on the terminal by
default. After the error
.BR szg (1)
may ignore the entire input line, or just the wrong part of it, or even
replace the wrong part with the last result.
Don't forget to undo in suspicious cases. Worse is better.
.SS syntax error
The entered expression cannot be parsed
.SS unknown command
Entered lowercase letter does not correspond to a known command
.SS unknown function
Unimplemented @x sequence (function)
.SS division by zero
Attempt at division by zero
.SS float modulo
Attempt at modulo
.B %
operation on a floating-point number
.SS n.a. for negative
Attempt at math functions @l @r (log sqrt) for a negative number
.SS n.a. for zero
Attempt at math function @l (log) for zero
.SS unable to parse number
When entering 1.2.3 or 12 in binary mode or 12.34ff in float mode
.SS variable $foo undefined
Using undefined user-variable in expression
.SH SEE ALSO
.BR lex (1),
.BR yacc (1),
.BR bc (1).
.SH AUTHOR
SZABO Gergely
.B <szg@subogero.com>
.br
Respect to
.B Stephen C. Johnson
the creator of
.BR yacc (1).
.SH COPYRIGHT
This is free software, distributed under the GNU GPL v3 license.
.br
There is absolutely no warranty.
.SH BUG REPORTS
Please send bug reports to the email address above, include
.B szg
in the Subject field. 
.br
Issues, milestones on
.B http://github.com/subogero/szg
.br
Or visit
.B http://subogero.dyndns.org/git/szg.html
.br
Patches welcome!
